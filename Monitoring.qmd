---
title: "Untitled"
format: html
editor: source
---

# Libraries 

```{r}
library(dplyr)
library(targets)
```

# Monitoring 

```{r}
setwd("/blue/rbacher/j.leary/repos/scLANE-Sims")
```

## Dashboard

```{r}
tar_watch(level_separation = 1200, seconds = 120, seconds_max = 360)
```

## Errored Jobs 

```{r}
tar_manifest() %>% 
  left_join((tar_progress()), by = "name") %>% 
  mutate(progress = case_when(is.na(progress) ~ "unstarted", 
                              progress %in% c("skipped", "built") ~ "finished", 
                              TRUE ~ progress), 
         progress = factor(progress, levels = c("unstarted", "finished", "started", "errored"))) %>% 
  filter(progress == "errored") %>% 
  View()
```

## Overall Progress Summary Table

```{r}
tar_manifest() %>% 
  left_join((tar_progress()), by = "name") %>% 
  mutate(progress = case_when(is.na(progress) ~ "unstarted", 
                              progress %in% c("skipped", "built") ~ "finished", 
                              TRUE ~ progress), 
         progress = factor(progress, levels = c("unstarted", "finished", "started", "errored"))) %>% 
  dplyr::count(progress) %>% 
  arrange(progress) %>% 
  mutate(p = round(n/sum(n), 4)) %>% 
  janitor::adorn_totals(where = "row") %>% 
  DT::datatable()
```

## Fine-resolution Progress Summary Table

```{r}
tar_manifest() %>% 
  left_join((tar_progress()), by = "name") %>% 
  mutate(progress = case_when(is.na(progress) ~ "unstarted", 
                              progress %in% c("skipped", "built") ~ "finished", 
                              TRUE ~ progress), 
         progress = factor(progress, levels = c("unstarted", "finished", "started", "errored")), 
         type = case_when(grepl("sim_", name) ~ "Simulation", 
                          grepl("scLANE.*balance.*GLMM.*", name) ~ "scLANE - GLMM", 
                          grepl("scLANE.*balance.*", name) ~ "scLANE - GEE", 
                          grepl("scLANE.*", name) ~ "scLANE - GLM", 
                          grepl("tradeSeq.*balance.*", name) ~ "tradeSeq - Multi", 
                          grepl("tradeSeq.*", name) ~ "tradeSeq - Single", 
                          grepl("Lamian", name) ~ "Lamian - Multi", 
                          TRUE ~ "Dataset"), 
         reference = case_when(grepl("panc", name) ~ "Pancreas", 
                               TRUE ~ "Lung")) %>% 
  dplyr::count(type, progress) %>% 
  with_groups(type, mutate, p = round(n / sum(n), 4)) %>%
  arrange(type, progress) %>% 
  DT::datatable()
```
